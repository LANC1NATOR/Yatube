openapi: 3.0.2
info:
  title: Yatube API
  version: ''
  description: API starts with /api/v1/

servers:
  - url: /api/v1

tags:
  - name: POSTS
    description: Posts
  - name: COMMENTS
    description: Comments
  - name: AUTH
    description: Tokens
  - name: FOLLOW
    description: Followers and subscriptions
  - name: GROUPS
    description: Groups

paths:
  /posts:
    get:
      tags:
        - POSTS
      summary: Gets a list of all posts
      description: Gets a list of all posts
      operationId: posts
      parameters:
      - name: group
        in: query
        description: group ID
        schema:
          type: number
      responses:
        200:
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      tags:
        - POSTS
      summary: Creates a new post
      description: Creates a new post
      operationId: new_post
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: 'New post'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/{id}:
    get:
      tags:
        - POSTS
      summary: Gets post by id
      description: Gets post by id
      operationId: one_post
      parameters:
      - name: id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      responses:
        200:
          description: Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    put:
      tags:
        - POSTS
      summary: Updates post by id
      description: Update post by id
      operationId: update_post
      parameters:
      - name: id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    patch:
      tags:
        - POSTS
      summary: Partially updates post by id
      description: Partially updates post by id
      operationId: patch_post
      parameters:
      - name: id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: Post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - POSTS
      summary: Deletes post by id
      description: Deletes post by id
      operationId: delete_post
      parameters:
      - name: id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      responses:
        204:
          description: ''
  /posts/{post_id}/comments:
    get:
      tags:
        - COMMENTS
      summary: Gets a list of all comments in a post
      description: Gets a list of all comments in a post
      operationId: comments
      parameters:
      - name: post_id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''

    post:
      tags:
        - COMMENTS
      summary: Creates a new post comment
      description: Creates a new post comment
      operationId: create_comment
      parameters:
      - name: post_id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema: {}
          description: ''
  /posts/{post_id}/comments/{comment_id}:
    get:
      tags:
        - COMMENTS
      summary: Gets a comment for a post by id
      description: Gets a comment for a post by id
      operationId: one_comment
      parameters:
      - name: post_id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      - name: comment_id
        in: path
        required: true
        description: Comment ID
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema: {}
          description: ''
    put:
      tags:
        - COMMENTS
      summary: Updates post comment by id
      description: Updates post comment by id
      operationId: put_comment
      parameters:
      - name: post_id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      - name: comment_id
        in: path
        required: true
        description: Comment ID
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema: {}
          description: ''
    patch:
      tags:
        - COMMENTS
      summary: Partially updates post comment by id
      description: Partially updates post comment by id
      operationId: patch_comment
      parameters:
      - name: post_id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      - name: comment_id
        in: path
        required: true
        description: Comment ID
        schema:
          type: number
      responses:
        200:
          content:
            application/json:
              schema: {}
          description: ''
    delete:
      tags:
        - COMMENTS
      summary: Deletes comment for post by id
      description: Deletes comment for post by id
      operationId: delete_comment
      parameters:
      - name: post_id
        in: path
        required: true
        description: Post ID
        schema:
          type: number
      - name: comment_id
        in: path
        required: true
        description: Comment ID
        schema:
          type: number
      responses:
        204:
          description: ''
  /token:
    post:
      tags:
        - AUTH
      summary: Gets a JWT token
      description: Gets a JWT token
      operationId: get_token
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  writeOnly: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTToken'
          description: ''
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /token/refresh:
    post:
      tags:
        - AUTH
      summary: Updates a JWT token
      description: Updates a JWT token
      operationId: update_token
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - refresh
              properties:
                refresh:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  refresh:
                    type: string
                required:
                - refresh
          description: ''

  /follow:
    get:
      tags:
        - FOLLOW
      summary: Gets a list of all subscribers and subscriptions
      description: Gets a list of all subscribers and subscriptions
      operationId: get_follow
      parameters:
      - name: search
        in: query
        description: username the one who is following or who is following
        schema:
          type: string
      responses:
        200:
          description: List of subscribers and subscriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
    post:
      tags:
        - FOLLOW
      summary: Creates subscription
      description: Creates subscription
      operationId: create_follow
      parameters:
      - name: user
        in: query
        description: User to filter by subscribers
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - following
              properties:
                following:
                  type: string
      responses:
        200:
          description: Subscribe
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'

  /group:
    get:
      tags:
        - GROUP
      summary: Gets a list of all groups
      description: Gets a list of all groups
      operationId: groups
      parameters: []
      responses:
        200:
          description: Group list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      tags:
        - GROUP
      summary: Creates a new group (only with admin rights)
      description: Creates a new group (only with admin rights)
      operationId: create_group
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: 'New group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'


components:
  schemas:
    Post:
      title: Posts
      type: object
      description: Post details
      required:
          - text
      properties:
        id:
          type: integer
          title: Post ID
          readOnly: true
        text:
          type: string
          title: Post text
        author:
          type: string
          title: username
          readOnly: true
        pub_date:
          type: string
          format: date-time
          title: Publication date
          readOnly: true
    ValidationError:
      title: Validation error
      type: object
      properties:
        field_name:
          type: array
          items:
            type: string
    JWTToken:
      title: JWT Token
      type: object
      properties:
        access:
          type: string
          title: access token
        refresh:
          type: string
          title: refresh token
    Comment:
      title: Comments
      type: object
      description: Comment details
      required:
          - text
      properties:
        id:
          type: integer
          title: Comment ID
          readOnly: true
        text:
          type: string
          title: Comment text
        author:
          type: string
          title: username
          readOnly: true
        pub_date:
          type: string
          format: date-time
          title: Publication date
          readOnly: true
    Follow:
      title: Followers and Subscriptions
      type: object
      properties:
        user:
          type: string
          title: username who subscribed
        author:
          type: string
          title: username to follow
    Group:
      title: Groups
      type: object
      required:
        - text
        - slug
      properties:
        title:
          type: string
          title: group name
        slug:
          type: string
          title: group slug

